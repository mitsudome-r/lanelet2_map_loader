#include "ros/ros.h"
#include <tf/tf.h>
#include <tf/transform_listener.h>
#include <tf/transform_broadcaster.h>
#include <sensor_msgs/CameraInfo.h>
#include <geometry_msgs/TwistStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseStamped.h>

#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>


#include "std_msgs/String.h"
#include <lanelet2_core/primitives/Lanelet.h>
#include <lanelet2_io/Io.h>
#include <lanelet2_io/io_handlers/Factory.h>
#include <lanelet2_io/io_handlers/Writer.h>
#include <lanelet2_io/io_handlers/OsmHandler.h>
#include <lanelet2_io/io_handlers/OsmFile.h>
#include <lanelet2_projection/UTM.h>
#include <lanelet2_core/LaneletMap.h>
#include <lanelet2_core/primitives/BasicRegulatoryElements.h>
#include <lanelet2_core/primitives/LineString.h>
#include <lanelet2_core/primitives/LineStringOrPolygon.h>

#include <lanelet2_traffic_rules/TrafficRules.h>
#include <lanelet2_traffic_rules/TrafficRulesFactory.h>



#include <lanelet2_routing/Route.h>
#include <lanelet2_routing/RoutingCost.h>
#include <lanelet2_routing/RoutingGraph.h>
#include <lanelet2_routing/RoutingGraphContainer.h>

#include <lanelet2_core/geometry/BoundingBox.h>
#include <lanelet2_core/geometry/Lanelet.h>
#include <lanelet2_core/geometry/Point.h>





#include <lanelet2_core/primitives/Lanelet.h>
#include <Eigen/Eigen>

#include <autoware_msgs/Signals.h>

#include <cstdio>

#include <sstream>
#include "rosUTM.h"
#include "libLaneletMap.h"

#include <lanelet_msgs/PointArray.h>
#include <lanelet_msgs/MapXML.h>
#include <pugixml.hpp>

#include <unistd.h>
#include <ios>
#include <iostream>
#include <fstream>
#include <string>
//using namespace lanelet;

#define TL_BY_LANELET 0
#define TL_BY_NEAREST 1

#define signalLampRadius 0.3

static std::string camera_id_str;


//std::string example_map_path = "/home/simon/work/catkin_ws/src/lanelet2/lanelet2_maps/res/mapping_example.osm";
std::string example_map_path = "/home/simon/work/peoria_data/map/Lanelet2/Peoria_0301_2019_fixed.osm";

//static int adjust_proj_x = 0;
//static int adjust_proj_y = 0;

typedef struct
{
  double thiX;
  double thiY;
  double thiZ;
} Angle;

//static VectorMap vmap;
//static Angle cameraOrientation; // camera orientation = car's orientation

static Eigen::Vector3f position;
static Eigen::Quaternionf orientation;
static float fx,
  fy,
  imageWidth,
  imageHeight,
  cx,
  cy;

static  tf::StampedTransform camera_to_map_tf;
static tf::StampedTransform map_to_camera_tf;




/////////////////////////////////////////////////////////////////////////////
//
// process_mem_usage(double &, double &) - takes two doubles by reference,
// attempts to read the system-dependent data for a process' virtual memory
// size and resident set size, and return the results in KB.
//
// On failure, returns 0.0, 0.0

void process_mem_usage(double& vm_usage, double& resident_set)
{
  using std::ios_base;
  using std::ifstream;
  using std::string;

  vm_usage     = 0.0;
  resident_set = 0.0;

  // 'file' stat seems to give the most reliable results
  //
  ifstream stat_stream("/proc/self/stat",ios_base::in);

  // dummy vars for leading entries in stat that we don't care about
  //
  string pid, comm, state, ppid, pgrp, session, tty_nr;
  string tpgid, flags, minflt, cminflt, majflt, cmajflt;
  string utime, stime, cutime, cstime, priority, nice;
  string O, itrealvalue, starttime;

  // the two fields we want
  //
  unsigned long vsize;
  long rss;

  stat_stream >> pid >> comm >> state >> ppid >> pgrp >> session >> tty_nr
	      >> tpgid >> flags >> minflt >> cminflt >> majflt >> cmajflt
	      >> utime >> stime >> cutime >> cstime >> priority >> nice
	      >> O >> itrealvalue >> starttime >> vsize >> rss; // don't care about the rest

  stat_stream.close();

  long page_size_kb = sysconf(_SC_PAGE_SIZE) / 1024; // in case x86-64 is configured to use 2MB pages
  vm_usage     = vsize / 1024.0;
  resident_set = rss * page_size_kb;
}

//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

/* Callback function to shift projection result */
/*
void adjust_xyCallback(const autoware_msgs::AdjustXY::ConstPtr &config_msg)
{
  adjust_proj_x = config_msg->x;
  adjust_proj_y = config_msg->y;
}
*/
//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

void cameraInfoCallback(const sensor_msgs::CameraInfo::ConstPtr camInfoMsg)
{


  //  std::cout << "recieved camera information\n";
  fx = static_cast<float>(camInfoMsg->P[0]);
  fy = static_cast<float>(camInfoMsg->P[5]);
  imageWidth = camInfoMsg->width;
  imageHeight = camInfoMsg->height;
  cx = static_cast<float>(camInfoMsg->P[2]);
  cy = static_cast<float>(camInfoMsg->P[6]);
}


//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------


void get_transform(std::string from_frame, std::string to_frame, Eigen::Quaternionf &ori, Eigen::Vector3f& pos, tf::StampedTransform & tf)
{

  static tf::TransformListener listener;
  // tf::StampedTransform tf;
 
  // target_frame    source_frame
  ros::Time now = ros::Time();
  listener.waitForTransform(from_frame, to_frame, now, ros::Duration(10.0));
  listener.lookupTransform(from_frame, to_frame, now, tf);

 
  tf::Vector3 &p = tf.getOrigin();
  tf::Quaternion o = tf.getRotation();

  pos.x() = p.x();
  pos.y() = p.y();
  pos.z() = p.z();
  ori.w() = o.w();
  ori.x() = o.x();
  ori.y() = o.y();
  ori.z() = o.z();

}

//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------




Eigen::Vector3f transform(const Eigen::Vector3f &psrc, tf::StampedTransform &tfsource)
{
  tf::Vector3 pt3(psrc.x(), psrc.y(), psrc.z());
  tf::Vector3 pt3s = tfsource * pt3;
  Eigen::Vector3f tf_v(pt3s.x(), pt3s.y(), pt3s.z());
  return tf_v;
}




//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------


void print_line_string_points(lanelet::ConstLineString3d ls)
{
  for (auto pi = ls.begin(); pi != ls.end(); pi++) {
    //   lanelet::Point3d p = *pi;
    std::cerr << "\t " << *pi << "\n"; 
  }
}




//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

void make_light_marker(lanelet::Point3d p, visualization_msgs::Marker& marker, std::string frame_id, std::string ns, int tl_count, int point_count){
  
  uint32_t box_shape = visualization_msgs::Marker::CUBE; 
  
  marker.header.frame_id = frame_id;
  marker.header.stamp = ros::Time::now();
  marker.ns = ns;
  marker.id = tl_count*10+point_count;
  marker.type = box_shape;
  marker.pose.position.x = p.x();
  marker.pose.position.y = p.y();
  marker.pose.position.z = p.z();
  
  float s = 0.5;

  marker.scale.x = s;
  marker.scale.y = s;
  marker.scale.z = s;
  
  marker.color.r = 0.0f;
  marker.color.g = 0.0f;
  marker.color.b = 0.0f;
  marker.color.a = 1.0f;
  
  if (point_count == 0) marker.color.r = 1.0f;
  else if (point_count == 1) marker.color.g = 1.0f;
  if (point_count == 2) marker.color.b = 1.0f;
  
  marker.lifetime = ros::Duration();
}




//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------


void delete_linestring_marker(visualization_msgs::Marker& points, visualization_msgs::Marker& line_strip , std::string ns, int lane_id){
  
  points.header.frame_id = line_strip.header.frame_id = "map";
  points.header.stamp = line_strip.header.stamp = ros::Time::now();

  points.ns = line_strip.ns;
  points.id = lane_id*10+0;
  line_strip.id = lane_id*10+1;
  points.action = line_strip.action = visualization_msgs::Marker::ADD;

  points.type = visualization_msgs::Marker::POINTS;
  line_strip.type = visualization_msgs::Marker::LINE_STRIP;
  geometry_msgs::Point p;
  p.x = 0;
  p.y = 0;
  p.z = 0; //(*i).z();

  for (int i = 0; i < 100; i++) {points.points.push_back(p);
  line_strip.points.push_back(p);
  }
  
}

void build_location_marker(int id, lanelet::BasicPoint2d location, visualization_msgs::Marker& m,
			   std::string frame_id, std::string ns, float r, float g, float b, float s= 0.15)
{
  
  
  m.header.frame_id = frame_id;
  m.header.stamp = ros::Time::now();
  m.ns = ns;
  m.action = visualization_msgs::Marker::ADD;

  m.type = visualization_msgs::Marker::POINTS;
  
  m.pose.orientation.w = 1.0;
  m.id = id;
  m.scale.x = s;
  m.scale.y = s;

  m.color.r = r;
  m.color.g = g;
  m.color.b = b;
  m.color.a = 1.0f;
  geometry_msgs::Point p;
  p.x = location.x();
  p.y = location.y();
  p.z = 118.0; //(*i).z();
  m.points.push_back(p);
}


 
void visualize_lanelet_linestring(int lane_id, lanelet::ConstLineString3d ls, visualization_msgs::Marker& points,
				  visualization_msgs::Marker& line_strip,
				  std::string frame_id, std::string ns, float lr, float lg, float lb, float lss= 0.1)
{

  
  points.header.frame_id = line_strip.header.frame_id = frame_id;
  points.header.stamp = line_strip.header.stamp = ros::Time::now();
  points.ns = line_strip.ns = ns;
  points.action = line_strip.action = visualization_msgs::Marker::ADD;
  
  points.pose.orientation.w = line_strip.pose.orientation.w = 1.0;
  points.id = lane_id*10+0;
  line_strip.id = lane_id*10+1;

  points.type = visualization_msgs::Marker::POINTS;
  line_strip.type = visualization_msgs::Marker::LINE_STRIP;
	
  points.scale.x = 0.2;
  points.scale.y = 0.2;
  line_strip.scale.x = lss; 


  points.color.g = 1.0f;
  points.color.a = 1.0f;
  line_strip.color.r = lr;
  line_strip.color.g = lg;
  line_strip.color.b = lb;
  line_strip.color.a = 1.0f;

  // fill out lane line
  for (auto i = ls.begin(); i != ls.end(); i++){
    geometry_msgs::Point p;
    p.x = (*i).x();
    p.y = (*i).y();
    p.z = 118.0; //(*i).z();
    points.points.push_back(p);
    line_strip.points.push_back(p);
  }
}


void visualize_lanelet(lanelet::ConstLanelet & lanelet, ros::Publisher &pub,
		       float *lline, float *rline, std::string ns, int id){
  visualization_msgs::Marker left_line_strip, left_points, right_line_strip, right_points;

  lanelet::ConstLineString3d left_ls = lanelet.leftBound();
  lanelet::ConstLineString3d right_ls = lanelet.rightBound();
	  

  visualize_lanelet_linestring(id*10+0, left_ls, left_points, left_line_strip, "map", "left_lane_bound", lline[0], lline[1], lline[2], lline[3]);
  visualize_lanelet_linestring(id*10+1,right_ls, right_points, right_line_strip, "map", "right_lane_bound", rline[0], rline[1], rline[2], rline[3]);
  
  pub.publish(left_points);
  pub.publish(left_line_strip);
  pub.publish(right_points);
  pub.publish(right_line_strip);
 }


//--------------------------------------------------------------------
//
// project into image place (from AUtoware feat_proj.cpp)
// Point3 type not found -> from Vector Map maths?
//
//--------------------------------------------------------------------


bool project2(const Eigen::Vector3f &pt, int &u, int &v, bool useOpenGLCoord = false)
{
  float nearPlane = 1.0;
  float farPlane = 200.0;

  Eigen::Vector3f _pt = transform(pt, camera_to_map_tf);

  float _u = _pt.x() * fx / _pt.z() + cx;
  float _v = _pt.y() * fy / _pt.z() + cy;
  
  u = static_cast<int>(_u);
  v = static_cast<int>(_v);
  if (u < 0 || imageWidth < u || v < 0 || imageHeight < v || _pt.z() < nearPlane || farPlane < _pt.z())
    {
      u = -1, v = -1;
      return false;
    }

  if (useOpenGLCoord)
    {
      v = imageHeight - v;
    }

  return true;
}



void visualize_lanelet_map(ros::Publisher& pub, lanelet::LaneletMap& lanelet_map){
  

  visualization_msgs::MarkerArray left_ls_array;
  visualization_msgs::MarkerArray right_ls_array;
  visualization_msgs::MarkerArray center_ls_array;
  left_ls_array.markers.resize(lanelet_map.laneletLayer.size());
  right_ls_array.markers.resize(lanelet_map.laneletLayer.size());
  center_ls_array.markers.resize(lanelet_map.laneletLayer.size());
  int lanelet_count = 0;
  for (auto i = lanelet_map.laneletLayer.begin(); i != lanelet_map.laneletLayer.end(); i++) {
    lanelet::Lanelet ll = *i;
    
    lanelet::ConstLineString3d left_ls = ll.leftBound();
    lanelet::ConstLineString3d right_ls = ll.rightBound();
    lanelet::ConstLineString3d center_ls = ll.centerline();
    visualization_msgs::Marker left_line_strip, left_points, right_line_strip, right_points, center_line_strip, center_points;
    
    visualize_lanelet_linestring(lanelet_count, left_ls, left_points, left_ls_array.markers[lanelet_count], "map", "aleft_lane_bound", 1.0f, 0.0f, 0.0f);
    visualize_lanelet_linestring(lanelet_count,right_ls, right_points, right_ls_array.markers[lanelet_count], "map", "aright_lane_bound",0.0f, 0.0f, 1.0f);
    visualize_lanelet_linestring(lanelet_count,center_ls, center_points, center_ls_array.markers[lanelet_count], "map", "acenter_lane_bound",0.0f, 1.0f, 1.0f);
    // left_ls_array.markers[lanelet_count] = left_ls;
    lanelet_count++;
  }
  //  std::cerr << "laneclet count = " << lanelet_count << "\n";
  //  std::cerr << "marker array size = " << left_ls_array.markers.size() << "\n";


  //  ros::spinOnce();
  pub.publish(left_ls_array);
  pub.publish(right_ls_array);
  pub.publish(center_ls_array);
  
}


//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

int main (int argc, char **argv)
{

  // UTM 1KM BLOCK
  lanelet::Origin origin({0,0});

  // origin not used in projector but projector template requires one
  lanelet::projection::RosUtmProjector ros_projector(origin);
  lanelet::ErrorMessages errors;
  lanelet::LaneletMapPtr map = load(example_map_path, ros_projector, &errors);
 
  ros::init(argc, argv, "lanelet_map_loader");  
  ros::NodeHandle rosnode;
  
  // publisher to visualise lanelet elements within rviz
  ros::Publisher map_xml_pub = rosnode.advertise<lanelet_msgs::MapXML>("/lanelet_map_xml", 1, true);

  lanelet_msgs::MapXML map_xml_msg;
  int status = lanelet_utils::Map::toXMLMsg(map, map_xml_msg, ros_projector);


  ros::spinOnce();
  // main loop

  ros::Rate loop_rate(10);  
  int loop_count = 0;
       
          map_xml_pub.publish(map_xml_msg);

  while(ros::ok()) // && loop_count < 10)
    {
 
      ros::spinOnce();
      loop_count++;
    }
  
  return 0;
}
